/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Adapter__factory>;
    getContractFactory(
      name: "IBaseAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseAdapter__factory>;
    getContractFactory(
      name: "Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: "MintableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableToken__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "BitReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BitReader__factory>;
    getContractFactory(
      name: "BlockParser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockParser__factory>;
    getContractFactory(
      name: "IBlockParser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBlockParser__factory>;
    getContractFactory(
      name: "ITransactionParser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransactionParser__factory>;
    getContractFactory(
      name: "TransactionParser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransactionParser__factory>;
    getContractFactory(
      name: "ITreeOfCellsParser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITreeOfCellsParser__factory>;
    getContractFactory(
      name: "TreeOfCellsParser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TreeOfCellsParser__factory>;
    getContractFactory(
      name: "IValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValidator__factory>;
    getContractFactory(
      name: "Validator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Validator__factory>;
    getContractFactory(
      name: "IShardValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IShardValidator__factory>;
    getContractFactory(
      name: "ShardValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShardValidator__factory>;
    getContractFactory(
      name: "ISignatureValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignatureValidator__factory>;
    getContractFactory(
      name: "SignatureValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignatureValidator__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Adapter>;
    getContractAt(
      name: "IBaseAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseAdapter>;
    getContractAt(
      name: "Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bridge>;
    getContractAt(
      name: "MintableToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableToken>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "BitReader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BitReader>;
    getContractAt(
      name: "BlockParser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockParser>;
    getContractAt(
      name: "IBlockParser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBlockParser>;
    getContractAt(
      name: "ITransactionParser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransactionParser>;
    getContractAt(
      name: "TransactionParser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransactionParser>;
    getContractAt(
      name: "ITreeOfCellsParser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITreeOfCellsParser>;
    getContractAt(
      name: "TreeOfCellsParser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TreeOfCellsParser>;
    getContractAt(
      name: "IValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IValidator>;
    getContractAt(
      name: "Validator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Validator>;
    getContractAt(
      name: "IShardValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IShardValidator>;
    getContractAt(
      name: "ShardValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShardValidator>;
    getContractAt(
      name: "ISignatureValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignatureValidator>;
    getContractAt(
      name: "SignatureValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignatureValidator>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
